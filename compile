#!/bin/bash

function error {
  echo -ne "\n\e[1;31m*\e[1;33m*\e[1;31m*\e[1;33m*\e[1;31m* \e[1;37mCompilation error! \e[1;31m*\e[1;33m*\e[1;31m*\e[1;33m*\e[1;31m*\e[0m\n\n";
  exit 1;
};

#clear
echo -ne "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
mkdir objects 2>/dev/null

COMPILE_OPTIONS="-O9 -g --fast-math -funsigned-char -Wno-unused-result -Werror -fdiagnostics-color=always -fPIE -pie"
LINK_OPTIONS="-fPIE -pie"
LINK_LIBRARIES="-lm -lpthread"

# create build.h with version number

echo "// This file is automatically regenerated by the compile script." > build.c
echo "#include <time.h>" > build.c
TIME=`date +%s`
echo "time_t build_time_utc = $TIME;" >> build.c
DATE=`date "+%Y-%m-%d %H:%M %Z" -d "@$TIME"`
echo "char build_compile_date[] = \"$DATE\";" >> build.c

# if official version, add SVN revision number

if [ -e .official ]; then
  SVN_STRING=`svnversion`
  echo "char build_svn_string[] = \"$SVN_STRING\";" >> build.c
  SVN_VERSION=`svnversion | sed s/.*:// | sed s/M//`
  echo "int build_svn_revision = $SVN_VERSION;" >> build.c
  if svnversion | grep [M:] >/dev/null; then
    echo "int build_svn_modified = 1;" >> build.c
  else
    echo "int build_svn_modified = 0;" >> build.c
  fi
else
  echo "char build_svn_string[] = \"unofficial\";" >> build.c
  echo "int build_svn_revision = 0;" >> build.c
fi

# process compile options

for i in $@; do
  i=${i^^}
  if [ $i == LINUX ]; then
    echo "char build_target[] = \"Linux\";" >> build.c
    COMPILE_OPTIONS="-DUNIX $COMPILE_OPTIONS -fstack-protector-all -D_FORTIFY_SOURCE=2";
    LINK_OPTIONS="$LINK_OPTIONS -Wl,-z,relro,-z,now,-z,noexecstack"
    LINK_LIBRARIES="$LINK_LIBRARIES -lbacktrace -lz -l:libglfw.so.3 -lGL -lGLU -lasound"
    COMPILER="gcc"
    EXE="mme"
    OS_SELECTED="yes"
  fi
  if [ $i == WINDOWS ]; then
    echo "char build_target[] = \"Windows\";" >> build.c
    # -lwinmm used to be in the link libraries but doesn't seem to be needed
    COMPILE_OPTIONS="$COMPILE_OPTIONS";
    LINK_LIBRARIES="static/libz.a static/libglfw3.a $LINK_LIBRARIES -lgdi32 -lopengl32 -lglu32 -lwsock32 -lws2_32 -lole32 -ldsound"
    LINK_OPTIONS="-static $LINK_OPTIONS"
    COMPILER="x86_64-w64-mingw32-gcc"
    EXE="mme.exe"
    OS_SELECTED="yes"
  fi
  if [ $i == ASAN ]; then
    COMPILE_OPTIONS="$COMPILE_OPTIONS -fsanitize=address";
    LINK_OPTIONS="$LINK_OPTIONS -fsanitize=address";
  fi
  if [ $i == TSAN ]; then
    COMPILE_OPTIONS="$COMPILE_OPTIONS -fsanitize=thread";
    LINK_OPTIONS="$LINK_OPTIONS -fsanitize=thread";
  fi
  OPTIONS="$OPTIONS -D$i"
done

if [ "$OS_SELECTED" != "yes" ]; then
  echo "Error: Specify Linux or Windows"
  error
fi

LAST=`cat .options 2>/dev/null`

if [ "$OPTIONS" != "$LAST" ]; then
  echo "$OPTIONS" > .options
  rm objects/*.o 2>/dev/null
fi

# if any header files changed, delete all the object files

for i in *.h; do
  if [ .clean -ot $i ]; then
    # rename the stb_*.o so they don't get deleted
    mv objects/stb_image.o objects/stb_image.oo 2>/dev/null
    mv objects/stb_image_write.o objects/stb_image_write.oo 2>/dev/null
    mv objects/stb_vorbis.o objects/stb_vorbis.oo 2>/dev/null
    rm objects/*.o 2>/dev/null
    mv objects/stb_image.oo objects/stb_image.o 2>/dev/null
    mv objects/stb_image_write.oo objects/stb_image_write.o 2>/dev/null
    mv objects/stb_vorbis.oo objects/stb_vorbis.o 2>/dev/null
    touch .clean
  fi
done

function dependency {
  for source in "${@:2}"; do
    if [ $source -nt $1 ]; then
      touch $1
    fi
  done
};

function compile {
  for source in $@; do
    if [ ! -e $source.c ]; then
      echo "Error: $source.c does not exist."
      error
    fi
    if [ $source.c -nt objects/$source.o ]; then
      COMMAND="$COMPILER $COMPILE_OPTIONS $OPTIONS -o objects/$source.o -c $source.c";
      echo -e "\e[1;32mShell:\e[0m $COMMAND"
      $COMMAND || error;
    fi
    OBJECTS="$OBJECTS objects/$source.o"
  done
};

# compile a tool to turn binary files into C source code

if [ convert_binaries_to_c_source -ot convert_binaries_to_c_source.c ]; then
  rm binaries.c 2>/dev/null
  COMMAND="gcc -o convert_binaries_to_c_source convert_binaries_to_c_source.c";
  echo -e "\e[1;32mShell:\e[0m $COMMAND"
  $COMMAND || error;
fi

# if any of the binary files have changed, run the tool again

for i in binaries/*; do
  if [ binaries.c -ot $i ]; then
    ./convert_binaries_to_c_source binaries/* > binaries.c || error
    break
  fi
done

# The STB library files don't depend on our header files,
# so they'll be compiled separately.

for source in stb_image stb_image_write; do
  if [ objects/$source.o -ot $source.h ]; then
    COMMAND="$COMPILER $COMPILE_OPTIONS $OPTIONS -o objects/$source.o -c $source.c";
    echo -e "\e[1;32mShell:\e[0m $COMMAND"
    $COMMAND || error;
  fi
  OBJECTS="$OBJECTS objects/$source.o"
done

# stb_vorbis.c is different in that the code is in the .c instead of the .h

for source in stb_vorbis; do
  if [ objects/$source.o -ot $source.c ]; then
    COMMAND="$COMPILER $COMPILE_OPTIONS $OPTIONS -o objects/$source.o -c $source.c";
    echo -e "\e[1;32mShell:\e[0m $COMMAND"
    $COMMAND || error;
  fi
  OBJECTS="$OBJECTS objects/$source.o"
done

# This compiles everything else if any of the header files have changed:

compile alsa argument binaries block build cache chat controls cpu directsound display easy error event glfw group gui lag main map math memory menu menus_anaglyph menus_autofog menus_chat menus_controls menus_escape menus_exit menus_fencepost menus_fog menus_fps menus_graphics menus_group menus_hacks menus_help menus_misc menus_perspective menus_play menus_server_connect menus_server_disconnect menus_server_error menus_server_loading menus_server_menu menus_sound mixer model network on opengl option packet paint player projectile sanity server sha1 sky sort sound stars statistics texture thread

# This makes the executable:

COMMAND="$COMPILER $LINK_OPTIONS -o $EXE $OBJECTS $LINK_LIBRARIES"
echo -e "\e[1;32mShell:\e[0m $COMMAND"
$COMMAND || error
